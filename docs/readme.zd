:title "Welcome to zen-doc (zd)"
:date "2021-12-10"
:author:title "Nikolai Ryzhikov"

^hide
:menu [{:dir fhir    :title ""}
       {:dir fhir-ru :title ""}]


:summary:p1 md/

Tblcoplugin exampleplugin example #this.is.a.ref

[[fun-name  ]]

#people.niquola:path:path

[[ref  people.niquola]]
[[a "https://github.com" "gh"]]

[[img https://github.com]]

((table :colums []))


```sql

  SELECT * from

```

blcoplugin exampleplugin example
blcoplugin exampleplugin [:sql "WHERE .. .."]

blcoplugin exampleplugin example  
blcoplugin exampleplugin example  

* list
* list
* list
* list
* list



  zen-doc (zd) is a library to build your knowledge base

  [[backrefs ...]]

  *  it is a semantic wiki engine
  * static site generation framework
  * zd syntax

:summary:example:src /

  :title  "Example document"
  :summary /
    Here is some text

^edn
:summary:example:result
  {:title "Example document"
   :summary "Here is some text"}


:syntax:intro md/

  zen document essentially is a hashmap (dictionary) - key/value
  it is based on EDN
  but introduce some sugar:

  * unescaped and multiline strings
  * keys order
  * keys annotations
  * flatten nested structures
  * extensible macrosystem


  Document consists of key-paths with values and annotations
  key-path is started with `:` and contains colon-separated key names

  key-path examples:
  ```zd
    :key-name val ;; key
    :parent-key:nested-key  val ;; nested key

  ```

  annotations are started with `^` with symbol name and optional one-line edn

  ```zd
  ^table {:columns [:name :another-name]}
  ```

^title "Parser"
:syntax:parser md/

  Scan document line by line
  if line starts with `^` assoc current keypath
  and put annotation into annotations accumulator
  if line starts with `:` or `~:` - start new keypath and attach to it accumulated annotations
  collect all lines until next annotation or keyword

  Process keypath


  * analize if keypath line ends with <annotation>/ -
    the rest of lines are joined into multiline string with \n
  * otherwise try to parse lines as EDN
  * assoc path into resulting document
  * remember keypath position and annotations in :zd/meta {[path] {annotation props, pos line-number}}
  * add document to repository


^table
:csv-table (load-file "dict.csv" :csv)

; comment
:exaple (load-file "dict.csv" :yaml)

^hiccup
^title "Authored docs:"
:backrefs
[:div (table (back-refs [:author]) {:columns [:title]})]

:sample (load-file "sample.yaml")

^hiccup
:refs
  [:ul (for [res (search {:category #{'fhir.admin}}
     [:li (:title res)])])]

:html/example html/

  <h1> Header </h2>
  <ul>
    <li> List </li>
  </ul>

:syntax:strings md/

Doublequoted strings are inherited from END
After special symbol `/` everything until next unidented line will be collected as a string
For example:

```zd
 :title / Some text .....
 :text /
  Here is
  multiline string
```
will be parsed into

```edn
{:title "...." :text "...."}
```

:syntax:comments:a
~:author people.niquola
~:date "2021-12-10"
~:text md/

 I do not agree with this

:footer md/

 This is just a footer

^table
:data
 [{:code "code" :display "display"}
  {:code "code" :display "display"}]

